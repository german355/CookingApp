// Generated by view binder compiler. Do not edit!
package com.example.cooking.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cooking.R;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentFilteredRecipesBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView emptyViewFilteredRecipes;

  @NonNull
  public final RecyclerView filteredRecipesRecyclerView;

  @NonNull
  public final CircularProgressIndicator progressBarFiltered;

  @NonNull
  public final SwipeRefreshLayout swipeRefreshFiltered;

  private FragmentFilteredRecipesBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView emptyViewFilteredRecipes, @NonNull RecyclerView filteredRecipesRecyclerView,
      @NonNull CircularProgressIndicator progressBarFiltered,
      @NonNull SwipeRefreshLayout swipeRefreshFiltered) {
    this.rootView = rootView;
    this.emptyViewFilteredRecipes = emptyViewFilteredRecipes;
    this.filteredRecipesRecyclerView = filteredRecipesRecyclerView;
    this.progressBarFiltered = progressBarFiltered;
    this.swipeRefreshFiltered = swipeRefreshFiltered;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentFilteredRecipesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentFilteredRecipesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_filtered_recipes, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentFilteredRecipesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.empty_view_filtered_recipes;
      TextView emptyViewFilteredRecipes = ViewBindings.findChildViewById(rootView, id);
      if (emptyViewFilteredRecipes == null) {
        break missingId;
      }

      id = R.id.filtered_recipes_recycler_view;
      RecyclerView filteredRecipesRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (filteredRecipesRecyclerView == null) {
        break missingId;
      }

      id = R.id.progress_bar_filtered;
      CircularProgressIndicator progressBarFiltered = ViewBindings.findChildViewById(rootView, id);
      if (progressBarFiltered == null) {
        break missingId;
      }

      id = R.id.swipe_refresh_filtered;
      SwipeRefreshLayout swipeRefreshFiltered = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefreshFiltered == null) {
        break missingId;
      }

      return new FragmentFilteredRecipesBinding((ConstraintLayout) rootView,
          emptyViewFilteredRecipes, filteredRecipesRecyclerView, progressBarFiltered,
          swipeRefreshFiltered);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
